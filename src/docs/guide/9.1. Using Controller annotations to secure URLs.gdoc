h4. Create your Grails application

bc.
$ grails create-app bookstore
$ cd bookstore

h4. Install the plugin

bc.
$ grails install-plugin spring-security-core

h4. Create the User and Role domain classes

bc.
$ grails s2-quickstart com.testapp User Role

You can choose whatever names you like for your domain classes and the package they're in - these are just examples.

{note}
Depending on your database, some names might not be valid. This goes for any domain classes you create, but names for security seem to have an affinity towards trouble. So before you use names like "User" or "Group", make sure they are not reserved keywords in your database.
{note}

The script will create this User class:

{code}
package com.testapp

class User {

   String username
   String password
   boolean enabled
   boolean accountExpired
   boolean accountLocked
   boolean passwordExpired

   static constraints = {
      username blank: false, unique: true
      password blank: false
   }

   static mapping = {
      password column: '`password`'
   }

   Set<Role> getAuthorities() {
      UserRole.findAllByUser(this).collect { it.role } as Set
   }
}
{code}

and this Role class:

{code}
package com.testapp

class Role {

   String authority

   static mapping = {
      cache true
   }

   static constraints = {
      authority blank: false, unique: true
   }
}
{code}

and a domain class that maps the many-to-many join class, @UserRole@:

{code}
package com.testapp

import org.apache.commons.lang.builder.HashCodeBuilder

class UserRole implements Serializable {

   User user
   Role role

   boolean equals(other) {
      if (!(other instanceof UserRole)) {
         return false
      }

      other.user?.id == user?.id &&
         other.role?.id == role?.id
   }

   int hashCode() {
      def builder = new HashCodeBuilder()
      if (user) builder.append(user.id)
      if (role) builder.append(role.id)
      builder.toHashCode()
   }

   static UserRole get(long userId, long roleId) {
      find 'from UserRole where user.id=:userId and role.id=:roleId',
         [userId: userId, roleId: roleId]
   }

   static UserRole create(User user, Role role, boolean flush = false) {
      new UserRole(user: user, role: role).save(flush: flush, insert: true)
   }

   static boolean remove(User user, Role role, boolean flush = false) {
      UserRole instance = UserRole.findByUserAndRole(user, role)
      instance ? instance.delete(flush: flush) : false
   }

   static void removeAll(User user) {
      executeUpdate 'DELETE FROM UserRole WHERE user=:user', [user: user]
   }

   static mapping = {
      id composite: ['role', 'user']
      version false
   }
}
{code}

It also creates some UI controllers and GSPs:
* @grails-app/controllers/LoginController.groovy@
* @grails-app/controllers/LogoutController.groovy@
* @grails-app/views/auth.gsp@
* @grails-app/views/denied.gsp@

Note that the script has edited @grails-app/conf/Config.groovy@ and added the configuration for your domain classes. Make sure that the changes are correct.

{note}
These generated files are not part of the plugin - these are your application files. So you're free to edit them however you like - they're examples to get you started. They only contain the minimum needed for the plugin, but you're free to add whatever extra fields and methods you like.
{note}

The plugin has no support for CRUD actions and GSPs for your domain classes, the @spring-security-ui@ plugin will supply a UI for those. So for now we'll create roles and users in @grails-app/conf/BootStrap.groovy@

h4. Create a controller that will be restricted by role

bc.
$ grails create-controller com.testapp.Secure

This will create @grails-app/controllers/com/testapp/SecureController.groovy@ - add some output so we can verify that things are working:

{code}
package com.testapp

class SecureController {
   def index = {
      render 'Secure access only'
   }
}
{code}

h4. Start the server

bc.
$ grails run-app

Before we secure the page, navigate to [http://localhost:8080/bookstore/secure|http://localhost:8080/bookstore/secure] to verify that you can see the page without being logged in.

Shut down the app (using CTRL-C) and edit @grails-app/conf/BootStrap.groovy@ to add the security objects that we need:

{code}
import com.testapp.Role
import com.testapp.User
import com.testapp.UserRole

class BootStrap {

   def springSecurityService

   def init = { servletContext ->

      def adminRole = new Role(authority: 'ROLE_ADMIN').save(flush: true)
      def userRole = new Role(authority: 'ROLE_USER').save(flush: true)

      String password = springSecurityService.encodePassword('password')
      def testUser = new User(username: 'me', enabled: true, password: password)
      testUser.save(flush: true)

      UserRole.create testUser, adminRole, true

      assert User.count() == 1
      assert Role.count() == 2
      assert UserRole.count() == 1
   }
}
{code}

Some things to note about what we did in @BootStrap.groovy@:
* we use @springSecurityService@ to encrypt the password
* we're not using a traditional GORM many-to-many mapping for the User<->Role relationship, instead we're mapping the join table with the @UserRole@ class. This is a performance optimization that will help significantly if many users have one or more common roles
* we're explicitly flushing the creates since @BootStrap@ doesn't run in a transaction or OpenSessionInView

Edit @grails-app/controllers/SecureController.groovy@ to import the annotation class and apply the annotation to restrict access:

{code}
package com.testapp

import grails.plugins.springsecurity.Secured

class SecureController {

   @Secured(['ROLE_ADMIN'])
   def index = {
      render 'Secure access only'
   }
}
{code}

or

{code}
package com.testapp

import grails.plugins.springsecurity.Secured

@Secured(['ROLE_ADMIN'])
class SecureController {
   def index = {
      render 'Secure access only'
   }
}
{code}

You can annotate the entire controller or individual actions. In this case since we only have one action we can do either.

Now run @grails run-app@ again and navigate to [http://localhost:8080/bookstore/secure|http://localhost:8080/bookstore/secure] and this time, you should be presented with the login page. Log in with the username and password you used for the test user, and you should again be able to see the secure page.

When logging in, you can test the Remember Me functionality. Check the checkbox, and once you've tested the secure page close your browser and re-open it. Navigate again the the secure page, and since you have a cookie stored, you shouldn't need to log in again. Logout at any time by navigating to [http://localhost:8080/bookstore/logout|http://localhost:8080/bookstore/logout]

h4. Creating a UI

If you would like to have a CRUD UI to work with users and roles, there are a few things you need to do beyond running @grails generate-all@.

The generated @UserController.save@ action will look something like this:

{code}
def save = {
   def userInstance = new User(params)
   if (userInstance.save(flush: true)) {
      flash.message = "${message(code: 'default.created.message', args: [message(code: 'user.label', default: 'User'), userInstance.id])}"
      redirect(action: "show", id: userInstance.id)
   }
   else {
      render(view: "create", model: [userInstance: userInstance])
   }
}
{code}

This will store cleartext passwords and you won't be able to authenticate, so add a call to encrypt the password with @springSecurityService@:

{code}
class UserController {

   def springSecurityService

   ...

   def save = {
      def userInstance = new User(params)
      userInstance.password = springSecurityService.encodePassword(params.password)
      if (userInstance.save(flush: true)) {
         flash.message = "${message(code: 'default.created.message', args: [message(code: 'user.label', default: 'User'), userInstance.id])}"
         redirect(action: "show", id: userInstance.id)
      }
      else {
         render(view: "create", model: [userInstance: userInstance])
      }
   }
}
{code}

Similarly when updating you'll need to encrypt the password if it changes. Change this:

{code}
def update = {
   def userInstance = User.get(params.id)
   if (userInstance) {
      if (params.version) {
         def version = params.version.toLong()
         ...
      }
      userInstance.properties = params
      if (!userInstance.hasErrors() && userInstance.save(flush: true)) {
         flash.message = "${message(code: 'default.updated.message', args: [message(code: 'user.label', default: 'User'), userInstance.id])}"
         redirect(action: "show", id: userInstance.id)
      }
      else {
         render(view: "edit", model: [userInstance: userInstance])
      }
   }
   else {
      flash.message = "${message(code: 'default.not.found.message', args: [message(code: 'user.label', default: 'User'), params.id])}"
      redirect(action: "list")
   }
}
{code}

to

{code}
def update = {
   def userInstance = User.get(params.id)
   if (userInstance) {
      if (params.version) {
         def version = params.version.toLong()
         ...
      }
      if (userInstance.password != params.password) {
         params.password = springSecurityService.encodePassword(params.password)
      }
      userInstance.properties = params
      if (!userInstance.hasErrors() && userInstance.save(flush: true)) {
         if (springSecurityService.loggedIn &&
                springSecurityService.principal.username == userInstance.username) {
            springSecurityService.reauthenticate userInstance.username
         }
         flash.message = "${message(code: 'default.updated.message', args: [message(code: 'user.label', default: 'User'), userInstance.id])}"
         redirect(action: "show", id: userInstance.id)
      }
      else {
         render(view: "edit", model: [userInstance: userInstance])
      }
   }
   else {
      flash.message = "${message(code: 'default.not.found.message', args: [message(code: 'user.label', default: 'User'), params.id])}"
      redirect(action: "list")
   }
}
{code}

Note that there's also a call to @springSecurityService.reauthenticate()@ to ensure that the cached @Authentication@ stays current.

