To guard against [session-fixation attacks|http://en.wikipedia.org/wiki/Session_fixation] set the @useSessionFixationPrevention@ attribute to @true@:

{code}
grails.plugins.springsecurity.useSessionFixationPrevention = true
{code}

When this is active, on successful authentication a new HTTP session will be created and the previous session's attributes will be copied into it. This way, if you were to start your session by clicking a link that was generated by someone trying to hack your account which contained an active session id, you would no longer be sharing the previous session after login - you'd have your own.

This is less of an issue now that Grails by default does not include jsessionid in URLs (see [this JIRA issue|http://jira.codehaus.org/browse/GRAILS-3364]) but it's still a good idea to use this feature regardless.

There are a couple of configuration options:

{table}
*Name* | *Default Value* |
sessionFixationPrevention.migrate | @true@ | whether to copy the session attributes of the existing session to the new session after login
sessionFixationPrevention.alwaysCreateSession | @false@ | whether to always create a session even if one didn't exist at the start of the request
{table}

