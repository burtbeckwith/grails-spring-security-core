Spring Security fires application events after various security-related actions such as successful login, unsuccessful login, etc. There are two hierarchies of events, [AbstractAuthenticationEvent|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/event/AbstractAuthenticationEvent.html] and [AbstractAuthorizationEvent|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/access/event/AbstractAuthorizationEvent.html].

There are two main ways of being notified of these events when using the plugin:

* register an event listener, ignoring events that you're not interested in (Spring only allows partial event subscription; you use generics to register the class of events you want to be notified of and it notifies you of those and all subclasses)
* register one or more callback closures in @grails-app/conf/Config.groovy@ that take advantage of the plugin's @org.codehaus.groovy.grails.plugins.springsecurity.SecurityEventListener@ which does the filtering for you

The first approach involves creating one or more Groovy or Java classes, e.g.

{code}
package com.foo.bar

import org.springframework.context.ApplicationListener
import org.springframework.security.authentication.event.AuthenticationSuccessEvent

class MySecurityEventListener implements ApplicationListener<AuthenticationSuccessEvent> {

   void onApplicationEvent(AuthenticationSuccessEvent event) {
      // handle the event
   }
}
{code}

registering them in @grails-app/conf/spring/resources.groovy@:

{code}
beans = {
   mySecurityEventListener(com.foo.bar.MySecurityEventListener)
}
{code}

Alternatively, you can just register one or more callback closure(s) in @grails-app/conf/Config.groovy@ and let @SecurityEventListener@ do all of the work for you, and you can just handle any event you like, e.g.:

{code}
grails.plugins.springsecurity.useSecurityEventListener = true

grails.plugins.springsecurity.onInteractiveAuthenticationSuccessEvent = { e, appCtx ->
   // handle InteractiveAuthenticationSuccessEvent
}

grails.plugins.springsecurity.onAbstractAuthenticationFailureEvent = { e, appCtx ->
   // handle AbstractAuthenticationFailureEvent
}

grails.plugins.springsecurity.onAuthenticationSuccessEvent = { e, appCtx ->
   // handle AuthenticationSuccessEvent
}

grails.plugins.springsecurity.onAuthenticationSwitchUserEvent = { e, appCtx ->
   // handle AuthenticationSwitchUserEvent
}

grails.plugins.springsecurity.onAuthorizationEvent = { e, appCtx ->
   // handle AuthorizationEvent
}
{code}

None of these closures are required; if none are configured, nothing will be called. Just implement the event handlers that you need.

Note that when a user authenticates, Spring Security initially fires an @AuthenticationSuccessEvent@ but this happens before the @Authentication@ is registered in the @SecurityContextHolder@. This means that the @springSecurityService@ methods that access the logged-in user won't work. Later in the processing a second event is fired, an @InteractiveAuthenticationSuccessEvent@, and when this happens the @SecurityContextHolder@ will have the @Authentication@. So depending on your needs you can choose to implement a callback for either or both events.

Also note that your event callback(s) will be ignored unless you set the @useSecurityEventListener@ property to true. This allows you to temporarily disable/enable them or enable them per-environment.

