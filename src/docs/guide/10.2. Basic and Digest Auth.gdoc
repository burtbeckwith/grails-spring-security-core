h4. Basic Auth
To use [HTTP Basic Authentication|http://en.wikipedia.org/wiki/Basic_access_authentication] in your application set the @useBasicAuth@ attribute to @true@. You should also change the @basic.realmName@ from its default value to one that's appropriate for your application, e.g.

{code}
grails.plugins.springsecurity.useBasicAuth = true
grails.plugins.springsecurity.basic.realmName = "Ralph's Bait and Tackle"
{code}

With this in place, users will be prompted with the standard browser login dialog instead of being redirected to a login page.

h4. Digest Auth

[Digest Authentication|http://en.wikipedia.org/wiki/Digest_access_authentication] is similar to Basic auth but is more secure in that it doesn't send your password in obfuscated cleartext. It looks just like Basic auth in practice - you get the same browser popup dialog when you authenticate. But since the credential transfer is genuinely encrypted (instead of just Base64-encoded as with Basic auth) you don't need to use SSL to guard your logins.

There is one issue with using Digest auth - by default you must store cleartext passwords in your database. This is because the browser encrypts your password along with the username and Realm name, and this is compared to the password encrypted using the same algorithm during authentication. The browser doesn't know about your @MessageDigest@ algorithm or salt source, so to encrypt them the same way you need to load a cleartext password from the database.

However the plugin does provide an alternative, but it has no configuration options (in particular the digest algorithm cannot be changed). If @digest.useCleartextPasswords@ is @false@ (the default) then the @passwordEncoder@ bean will be replaced with an instance of @grails.plugins.springsecurity.DigestAuthPasswordEncoder@. This encoder uses the same approach as the browser, i.e. it combines your password along with your username and Realm name essentially as a salt, and encrypting with MD5. MD5 is not recommended in general but given the typical size of the salt it is reasonably safe to use.

The only required attribute is @useDigestAuth@ which you must set to @true@, but you'll probably also want to change the realm name too:

{code}
grails.plugins.springsecurity.useDigestAuth = true
grails.plugins.springsecurity.digest.realmName = "Ralph's Bait and Tackle"
{code}

There are a few other configuration options that you'll be less likely to need to change.

{table}
*Property* | *Default Value* | *Meaning*
digest.realmName | 'Grails Realm' | The realm name that's displayed in the browser popup
digest.key | 'changeme' | A key that's used to build the nonce for authentication; should be changed but that's not required
digest.nonceValiditySeconds | 300 | the duration that a nonce stays valid
digest.passwordAlreadyEncoded | @false@ | whether you're managing the password encryption yourself
digest.createAuthenticatedToken | @false@ | if @true@ creates an authenticated @UsernamePasswordAuthenticationToken@ to avoid loading the user from the database twice (but this skips the isAccountNonExpired(), isAccountNonLocked(), isCredentialsNonExpired(), isEnabled() checks so this is not advised)
digest.useCleartextPasswords | @false@ | if @true@ then a cleartext password encoder will be used (not recommended); if @false@ then passwords encrypted by @DigestAuthPasswordEncoder@ will be stored in the database
{table}



