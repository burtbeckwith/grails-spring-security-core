Another authentication mechanism supported by Spring Security is certificate-based, or "mutual authentication". To use this you must use HTTPS and configure the server to require a client certificate (ordinarily only the server provides a certificate). Your username will be extracted from the client certificate if it's valid, and you'll be considered "pre-authenticated". As long as there is a corresponding user in the database with that username, your authentication will succeed and you won't be asked for a password, and the your @Authentication@ will contain the authorities associated with your username.

There are a few configuration options available for this feature:

{table}
*Property* | *Default Value* | *Meaning*
useX509 | @false@ | whether to support certificate-based logins
x509.continueFilterChainOnUnsuccessfulAuthentication | @true@ | whether to proceed when an authentication attempt fails to allow other authentication mechanisms to process the request
x509.subjectDnRegex | 'CN=(.\*?),' | the regex for extracting the username from the certificate's subject name
x509.checkForPrincipalChanges | @false@ | whether to re-extract the username from the certificate and check that it's still the current user when there's a valid @Authentication@ already
x509.invalidateSessionOnPrincipalChange | @true@ | whether to invalidate the session if the principal changed (based on a @checkForPrincipalChanges@ check)
{table}

The details around configuring your server for SSL and configuring browser certificates are beyond the scope of this document, but if you're using Tomcat you should look at its [SSL documentation|http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html]. Also, one quick way to get a test environment working is to use the instructions from [this discussion at Stack Overflow|http://stackoverflow.com/questions/1180397/tomcat-server-client-self-signed-ssl-certificate].
