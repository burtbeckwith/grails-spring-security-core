There are three ways to configure request mappings to secure application URLs. The goal is to create a mapping of URL patterns to the roles required to access those URLs. Use whichever approach makes the most sense for you. The three approaches are:
* @\@Secured@ annotations
* a simple Map in @Config.groovy@
* @Requestmap@ domain class instances stored in the database

and the default approach is to use annotations. You can only use one method at a time, and it's configured with the @securityConfigType@ attribute; the value has to be an @SecurityConfigType@ enum value.

To use annotations, specify @SecurityConfigType.Annotation@ (or leave it unspecified since it's the default):

{code}
import grails.plugins.springsecurity.SecurityConfigType

...

grails.plugins.springsecurity.securityConfigType = SecurityConfigType.Annotation
{code}

To use the @Config.groovy@ Map, specify @SecurityConfigType.InterceptUrlMap@:

{code}
import grails.plugins.springsecurity.SecurityConfigType

...

grails.plugins.springsecurity.securityConfigType = SecurityConfigType.InterceptUrlMap
{code}

To use @Requestmap@ entries, specify @SecurityConfigType.Requestmap@:

{code}
import grails.plugins.springsecurity.SecurityConfigType

...

grails.plugins.springsecurity.securityConfigType = SecurityConfigType.Requestmap
{code}

In addition, you can use a pessimistic 'lockdown' approach if you like. Most applications are mostly public, with some pages only accessible to authenticated users with various roles. Here it makes more sense to leave URLs open by default and restrict access one a case-by-case basis. But if your app is primarily secure, you can deny access to all URLs that don't have an applicable URL-Role configuration.

To use the pessimistic approach, add this to @grails-app/conf/Config.groovy@:

{code}
grails.plugins.springsecurity.rejectIfNoRule = true
{code}

and any requested URL that doesn't have a corresponding rule will be denied to all users.

h4. URLs and authorities

In each approach you configure a mapping for a URL pattern to the role(s) that are required to access those URLs, e.g. @/admin/user/\*\*@ requires @ROLE_ADMIN@. In addition, you can combine the role(s) with tokens such as IS_AUTHENTICATED_ANONYMOUSLY, IS_AUTHENTICATED_REMEMBERED, and IS_AUTHENTICATED_FULLY. One or more @Voter@s will process any tokens and enforce a rule based on them:
* @IS_AUTHENTICATED_ANONYMOUSLY@
** signifies that anyone can access this URL; by default the @AnonymousAuthenticationFilter@ ensures that there's an 'anonymous' @Authentication@ with no roles so every user has an authentication, so this token just requires any authentication, even anonymous
* @IS_AUTHENTICATED_REMEMBERED@
** signifies that the user is authenticated via a remember-me cookie or an explicit login
* @IS_AUTHENTICATED_FULLY@
** requires that the user be fully authenticated via an explicit login

@IS_AUTHENTICATED_FULLY@ is useful to implement a security scheme where you allow users to check a remember-me checkbox during login, and auto-authenticate them each time they come back to your site, but require them to login with a password for some parts of the site. For example regular browsing might be allowed and even adding items to a shopping cart with only a cookie, but checking out or viewing purchase history would require an explicit login.

h4. Advantages and disadvantages

Each approach has its advantages and disadvantages. Annotations and the @Config.groovy@ Map are less flexible since they're configured once in the code and can only be updated by restarting the application (in prod mode anyway). In practice this isn't that serious a concern since for most applications security mappings are unlikely to change at runtime.

If you want runtime-configurability then storing @Requestmap@ entries enables this. This allows you to have a core set of rules populated at application startup and to edit, add, and delete them whenever you like. But it separates the security rules from the application code, which is less convenient than having the rules defined in @grails-app/conf/Config.groovy@ or in the applicable controllers using annotations.

h4. Some notes

* to understand the meaning of @IS_AUTHENTICATED_FULLY@, @IS_AUTHENTICATED_REMEMBERED@, and @IS_AUTHENTICATED_ANONYMOUSLY@, see the Javadoc for [AuthenticatedVoter|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/access/vote/AuthenticatedVoter.html]
* URLs must be mapped in lowercase if using the @Requestmap@ or @grails-app/conf/Config.groovy@ map approaches, so for example if you have a FooBarController, its urls will be of the form /fooBar/list, /fooBar/create, etc. but these must be mapped as /foobar/, /foobar/list, /foobar/create. This is handled automatically for you if you use annotations.

