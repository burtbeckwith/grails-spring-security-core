Spring Security supports creating a remember-me cookie so users aren't required to login with a username and password for each session. This is optional and is usually implemented as a checkbox on the login form; the default @auth.gsp@ supplied by the plugin has this feature.

There are a few configuration attributes related to remember-me:

{table}
*Property* | *Default Value* | *Meaning*
rememberMe.cookieName | 'grails_remember_me' | remember-me cookie name - should be unique per application
rememberMe.alwaysRemember | @false@ | create a remember-me cookie even if there's no checkbox on the form if @true@
rememberMe.tokenValiditySeconds | 1209600 (14 days) | max age of the cookie in seconds
rememberMe.parameter | '_spring_security_remember_me' | Login form remember-me checkbox name
rememberMe.key | 'grailsRocks' | a value used to encode cookies - should be unique per application
rememberMe.persistent | @false@ | if @true@ store persistent login information in the database
rememberMe.persistentToken.domainClassName | 'PersistentLogin' | domain class used to manage persistent logins
rememberMe.persistentToken.seriesLength | 16 | the number of characters in the cookie's @series@ attribute
rememberMe.persistentToken.tokenLength | 16 | the number of characters in the cookie's @token@ attribute
atr.rememberMeClass | [RememberMeAuthenticationToken|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/RememberMeAuthenticationToken.html] | remember-me authentication class
{table}

Three attributes that you're most likely to change are
* @rememberMe.cookieName@ - this is purely aesthetic since most users won't look at their cookies, but you probably want the name displayed to be something application-specific and not "grails_remember_me"
* @rememberMe.key@ - this is used as part of a salt when encrypting the cookie, so changing it from the default will make it that much harder to do brute force attacks
* @rememberMe.tokenValiditySeconds@ - the default is two weeks, but you can set it to whatever makes sense for your application

h4. Persistent logins

The remember-me cookie is very secure but for an even stronger solution you can use persistent logins that store the username in the database. See the [Spring Security docs|http://static.springsource.org/spring-security/site/docs/3.0.x/reference/remember-me.html] for a description of the implementation.

This is also useful for authentication schemes like OpenID and Facebook, where you don't manage passwords in your database, but most of the other user information is stored locally. Without a password you can't use the standard cookie format, so persistent logins enable remember-me cookies in these scenarios.

To use this feature, run the [s2-create-persistent-token|Scripts] script. This will create the domain class, and register its name in @grails-app/conf/Config.groovy@. It will also enable persistent logins by setting @rememberMe.persistent@ to @true@.
