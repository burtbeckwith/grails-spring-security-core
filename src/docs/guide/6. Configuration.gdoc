Much of the Spring Security configuration is user-configurable. The configuration has sensible default values, but each application has special needs. Default values are in the plugin's @grails-app/conf/DefaultSecurityConfig.groovy@ file and you can put application-specific values are in @grails-app/conf/Config.groovy@. The two configurations will be merged with application values overriding the defaults.

{note}
All of these property overrides must be specified in @Config.groovy@ using the @grails.plugins.springsecurity@ suffix, for example
{code}
grails.plugins.springsecurity.userLookup.userDomainClassName =
     'com.mycompany.myapp.User'
{code}
{note}

h4. Properties that are most likely to be overridden are the @User@ and @Role@ (and @Requestmap@ if using the database to store mappings) class and field names:

{table}
*Property* | *Default Value* | *Meaning*
userLookup.userDomainClassName | 'Person' | User class name
userLookup.usernamePropertyName | 'username' | User class username field
userLookup.passwordPropertyName | 'password' | User class password field
userLookup.authoritiesPropertyName | 'authorities' | User class role collection field
userLookup.enabledPropertyName | 'enabled' | User class enabled field
userLookup.accountExpiredPropertyName | 'accountExpired' | User class account expired field
userLookup.accountLockedPropertyName | 'accountLocked' | User class account locked field
userLookup.passwordExpiredPropertyName | 'passwordExpired' | User class password expired field
userLookup.authorityJoinClassName | 'PersonAuthority' | User/Role many-many join class name
authority.className | 'Authority' | Role class name
authority.nameField | 'authority' | Role class role name field
requestMap.className | 'Requestmap' | Requestmap class name
requestMap.urlField | 'url' | Requestmap class URL pattern field
requestMap.configAttributeField | 'configAttribute' | Requestmap class role/token field
{table}

h4. To customize the login error messages that are displayed for the various error conditions:

{table}
*Property* | *Default Value* | *Meaning*
errors.login.fail | "Sorry, we were not able to find a user with that username and password." | message displayed when authentication is successful because of missing user or bad password
errors.login.disabled | "Sorry, your account is disabled." | message displayed when authentication is successful but user is not enabled
{table}

h4. rememberMeServices bean (cookie management)

{table}
*Property* | *Default Value* | *Meaning*
rememberMe.cookieName | 'grails_remember_me' | remember-me cookie name - should be unique per application
rememberMe.alwaysRemember | @false@ | create a remember-me cookie even if there's no checkbox on the form if @true@
rememberMe.tokenValiditySeconds | 1209600 (14 days) | max age of the cookie in seconds
rememberMe.parameter | '_spring_security_remember_me' | Login form remember-me checkbox name
rememberMe.key | 'grailsRocks' | a value used to encode cookies - should be unique per application
atr.rememberMeClass | [RememberMeAuthenticationToken|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/RememberMeAuthenticationToken.html] | remember-me authentication class
{table}

h4. URL attributes

{table}
*Property* | *Default Value* | *Meaning*
apf.filterProcessesUrl | '/j_spring_security_check' | login form post URL, intercepted by Spring Security filter
apf.usernameParameter | 'j_username' | login form username parameter
apf.passwordParameter | 'j_password' | login form password parameter
apf.allowSessionCreation | @true@ | whether or not to allow authentication to create an HTTP session
apf.postOnly | @true@ | whether to only allow POST login requests
failureHandler.defaultFailureUrl | '/login/authfail?login_error=1' | redirect URL for failed logins
failureHandler.ajaxAuthFailUrl | '/login/authfail?ajax=true' | redirect URL for failed Ajax logins
failureHandler.exceptionMappings | none | a map of exception class name (subclass of [AuthenticationException|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/AuthenticationException.html]) to URL to redirect to for that exception type after authentication failure
failureHandler.useForward | @false@ | whether to render the error page (@true@) or redirect (@false@)
successHandler.defaultTargetUrl | '/' | default post-login URL if there's no saved request that triggered the login
successHandler.alwaysUseDefault | @false@ | if @true@, always redirect to the value of @successHandler.defaultTargetUrl@ after successful authentication, otherwise redirects to to originally-requested page
successHandler.targetUrlParameter | 'spring-security-redirect' | name of optional login form parameter that specifies destination after successful login
successHandler.useReferer | @false@ | whether to use the HTTP @Referer@ header to determine post-login destination
successHandler.ajaxSuccessUrl | '/login/ajaxSuccess' | URL to redirect to after successful Ajax login
auth.loginFormUrl | '/login/auth' | URL of login page
auth.forceHttps | @false@ | if @true@, will redirect login page requests to HTTPS
auth.ajaxLoginFormUrl | '/login/authAjax' | URL of Ajax login page
auth.useForward | false | whether to render the login page (@true@) or redirect (@false@)
logout.afterLogoutUrl | '/' | URL to redirect to after logout
logout.filterProcessesUrl | '/j_spring_security_logout' | logout URL, intercepted by Spring Security filter
logout.handlerNames | ['rememberMeServices', 'securityContextLogoutHandler'] | logout handler bean names; more details are [here|guide:10.9. Logout Handlers]
adh.errorPage | '/login/denied' | location of the 403 error page
adh.ajaxErrorPage | '/login/ajaxDenied' | location of the 403 error page for Ajax requests
ajaxHeader | 'X-Requested-With' | header name sent by Ajax library, used to detect Ajax
redirectStrategy.contextRelative | @false@ | if @true@, the redirect URL will be the value after the request context path;  this will result in the loss of protocol information (HTTP or HTTPS), so will cause problems if a redirect is being performed to change from HTTP to HTTPS or vice versa
{table}

h4. Channel security (declaring which URLs must use HTTPS or HTTP)

More configuration details are [here|guide:10.7. Channel security]

{table}
*Property* | *Default Value* | *Meaning*
portMapper.httpPort | 8080 | the HTTP port your app uses
portMapper.httpsPort | 8443 | the HTTPS port your app uses
secureChannel.definition | none | Map of URL pattern to channel rule
{table}

h4. IP address restrictions

More configuration details are [here|guide:10.8. IP Address Restrictions]

{table}
*Property* | *Default Value* | *Meaning*
ipRestrictions | none | a Map of URL patterns to IP address patterns
{table}

h4. Password encryption attributes

{table}
*Property* | *Default* | *Description*
password.algorithm | 'SHA-256' | passwordEncoder Message Digest algorithm, see [this page|http://java.sun.com/j2se/1.5.0/docs/guide/security/CryptoSpec.html#AppA] for options
password.encodeHashAsBase64 | @false@ | if @true@, Base64-encode the hashed password
{table}

h4. HTTP Basic Authentication

More configuration details are [here|guide:10.2. Basic and Digest Auth]

h4. Digest Authentication

More configuration details are [here|guide:10.2. Basic and Digest Auth]

{table}
*Property* | *Default* | *Description*
useBasicAuth | @false@ | whether to use basic auth
basic.realmName | 'Grails Realm' | the realm name displayed in the browser authentication popup
{table}

h4. Switch User

More configuration details are [here|guide:10.3. Switch User]

{table}
*Property* | *Default* | *Meaning*
useSwitchUserFilter | @false@ | whether to use the switch user filter
switchUser.switchUserUrl | '/j_spring_security_switch_user' | url to access (via GET or POST) to switch to another user
switchUser.exitUserUrl | '/j_spring_security_exit_user' | url to access to switch to another user
switchUser.targetUrl | the same as @successHandler.defaultTargetUrl@ | the URL to redirect to after switching
switchUser.switchFailureUrl | the same as @failureHandler.defaultFailureUrl@ | the URL to redirect to after an error attempting to switch
{table}

h4. Session Fixation

More configuration details are [here|guide:10.4. Session Fixation]

{table}
*Property* | *Default Value* |
useSessionFixation | @false@ | whether to use session fixation
sessionFixation.migrate | @true@ | whether to copy the session attributes of the existing session to the new session after login
sessionFixation.alwaysCreateSession | @false@ | whether to always create a session even if one didn't exist at the start of the request
{table}

h4. Certificate (X509) login

More configuration details are [here|guide:10.6. Certificate (X509) login]

{table}
*Property* | *Default Value* | *Meaning*
useX509 | @false@ | whether to support certificate-based logins
x509.continueFilterChainOnUnsuccessfulAuthentication | @true@ | whether to proceed when an authentication attempt fails to allow other authentication mechanisms to process the request
x509.subjectDnRegex | 'CN=(.\*?),' | the regex for extracting the username from the certificate's subject name
x509.checkForPrincipalChanges | @false@ | whether to re-extract the username from the certificate and check that it's still the current user when there's a valid @Authentication@ already
x509.invalidateSessionOnPrincipalChange | @true@ | whether to invalidate the session if the principal changed (based on a @checkForPrincipalChanges@ check)
{table}

h4. Other miscellaneous attributes

{table}
*Property* | *Default Value* | *Meaning*
active | @true@ | whether the plugin is enabled
rejectIfNoRule | @false@ | 'strict' mode where an explicit grant is required to access any resource; if @true@ make sure to allow @IS_AUTHENTICATED_ANONYMOUSLY@ for '/', '/js/\*\*', '/css/\*\*', '/images/\*\*', '/login/\*\*', '/logout/\*\*', etc.
anon.key | 'foo' | anonymousProcessingFilter key
anon.userAttribute | 'anonymousUser, ROLE_ANONYMOUS' | anonymousProcessingFilter username and role
atr.anonymousClass | [AnonymousAuthenticationToken|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/AnonymousAuthenticationToken.html] | anonymous token class
useHttpSessionEventPublisher | @false@ | if @true@, an [HttpSessionEventPublisher|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/session/HttpSessionEventPublisher.html] will be configured
cacheUsers | @false@ | if @true@, logins are cached using an @EhCache@
useSecurityEventListener | @false@ | if @true@, configure @SecurityEventListener@; more details [here|guide:5. Events]
dao.reflectionSaltSourceProperty | none | which property to use for the reflection-based salt source; more details [here|guide:10.5. Salted passwords]
requestCache.onlyOnGet | @false@ | whether to only cache a [SavedRequest|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/savedrequest/SavedRequest.html] on GET requests
requestCache.createSession | @true@ | whether caching @SavedRequest@ can trigger the creation of a session
authenticationDetails.authClass | [WebAuthenticationDetails|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/authentication/WebAuthenticationDetails.html] | the @Authentication@ details class to use
roleHierarchy | none | hierarchical role definition; more details [here|guide:10.12. Hierarchical Roles]
voterNames | ['authenticatedVoter', 'roleVoter'] | bean names of voters; more details [here|guide:10.10. Voters]
providerNames | ['daoAuthenticationProvider', 'anonymousAuthenticationProvider', 'rememberMeAuthenticationProvider'] | bean names of authentication providers; more details [here|guide:10.11. Authentication Providers]
securityConfigType | type of request mapping to use | one of @SecurityConfigType.Annotation@, @SecurityConfigType.Requestmap@, or @SecurityConfigType.InterceptUrlMap@; more details [here|guide:3. Securing URLs]
controllerAnnotations.matcher | 'ant' | whether to use an Ant-style URL matcher ('ant') or Regex ('regex')
controllerAnnotations.lowercase | @true@ | whether to do URL comparisons using lowercase
controllerAnnotations.staticRules | none | extra rules that cannot be mapped using annotations
interceptUrlMap | none | request mapping definition when using @SecurityConfigType.InterceptUrlMap@; more details [here|guide:3.2 Config.groovy]
registerLoggerListener | @false@ | if @true@ registers a [LoggerListener|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/access/event/LoggerListener.html] which logs interceptor-related application events 
{table}

