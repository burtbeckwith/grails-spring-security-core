This plugin is a successor to the original plugin that provided support for Spring Security, the [Acegi plugin|http://grails.org/plugin/acegi/]. It's a new plugin that doesn't depend on that plugin but there are many similarities, so migrating is fairly straightforward.

h4. Core differences

The Spring Security plugin retains many of the core features of the Acegi plugin:
* form-based authentication
* storing users, roles, and optionally requestmaps in the database and accessing via domain classes
* guarding URLs with annotations, requestmap domain class, or static configuration
* security tags
* security service
* security events
* Ajax login
* Basic auth
* Switch User
* Channel security
* IP Address Restrictions

and in addition adds several new features:
* Digest Auth
* Session Fixation
* Salted passwords
* Certificate (x509) login
* Hierarchical Roles
* Account Locking and Forcing Password Change

There are a few core concepts that have changed and will require configuration changes in your application:
{table}
| *Spring Security plugin* | *Acegi plugin*
enabled by default | @true@ | @false@
cache UserDetails by default | @false@ | @true@
configuration location | @grails-app/conf/Config.groovy@ | @grails-app/conf/SecurityConfig.groovy@
security service | @springSecurityService@ | @authenticateService@
{table}

There are features that are not included but which will be available in secondary plugins that will extend and depend on the core plugin:
* Facebook
* OpenID
* LDAP
* CAS
* NTLM
* Kerberos
* User registration

h4. Configuration differences

This table summarizes the configuration attribute names in both plugins:

{table}
*Acegi plugin* | *Spring Security plugin*
active | active
loginUserDomainClass | userLookup.userDomainClassName
userName | userLookup.usernamePropertyName
enabled | userLookup.enabledPropertyName
password | userLookup.passwordPropertyName
relationalAuthorities | userLookup.authoritiesPropertyName
getAuthoritiesMethod | N/A
authorityDomainClass | authority.className
authorityField | authority.nameField
authenticationFailureUrl | failureHandler.defaultFailureUrl
ajaxAuthenticationFailureUrl | failureHandler.ajaxAuthFailUrl
defaultTargetUrl | successHandler.defaultTargetUrl
alwaysUseDefaultTargetUrl | successHandler.alwaysUseDefault
filterProcessesUrl | apf.filterProcessesUrl
key | anon.key
userAttribute | anon.userAttribute
loginFormUrl | auth.loginFormUrl
forceHttps | auth.forceHttps
ajaxLoginFormUrl | auth.ajaxLoginFormUrl
afterLogoutUrl | 	logout.afterLogoutUrl
errorPage | adh.errorPage
ajaxErrorPage | adh.ajaxErrorPage
ajaxHeader | ajaxHeader
algorithm | password.algorithm
encodeHashAsBase64 | password.encodeHashAsBase64
cookieName | rememberMe.cookieName
alwaysRemember | rememberMe.alwaysRemember
tokenValiditySeconds | rememberMe.tokenValiditySeconds
parameter | rememberMe.parameter
rememberMeKey | rememberMe.key
useLogger | registerLoggerListener
useRequestMapDomainClass | securityConfigType = @SecurityConfigType.Requestmap@
requestMapClass | requestMap.className
requestMapPathField | requestMap.urlField
requestMapConfigAttributeField | requestMap.configAttributeField
useControllerAnnotations | securityConfigType = @SecurityConfigType.Annotation@
controllerAnnotationsMatcher | controllerAnnotations.matcher
controllerAnnotationsMatchesLowercase | controllerAnnotations.lowercase
controllerAnnotationStaticRules | controllerAnnotations.staticRules
controllerAnnotationsRejectIfNoRule | rejectIfNoRule
requestMapString | N/A - securityConfigType = @SecurityConfigType.InterceptUrlMap@ is very similar
realmName | basic.realmName
basicProcessingFilter | useBasicAuth
switchUserProcessingFilter | useSwitchUserFilter
swswitchUserUrl | switchUser.switchUserUrl
swexitUserUrl | switchUser.exitUserUrl
swtargetUrl | switchUser.targetUrl
useMail | N/A - registration will be supported in the UI plugin
mailHost | N/A - registration will be supported in the UI plugin
mailUsername | N/A - registration will be supported in the UI plugin
mailPassword | N/A - registration will be supported in the UI plugin
mailProtocol | N/A - registration will be supported in the UI plugin
mailFrom | N/A - registration will be supported in the UI plugin
mailPort | N/A - registration will be supported in the UI plugin
defaultRole | N/A - registration will be supported in the UI plugin
useOpenId | N/A - will be supported in the OpenID plugin
openIdNonceMaxSeconds | N/A - will be supported in the OpenID plugin
useLdap | N/A - will be supported in the LDAP plugin
ldapRetrieveGroupRoles | N/A - will be supported in the LDAP plugin
ldapRetrieveDatabaseRoles | N/A - will be supported in the LDAP plugin
ldapSearchSubtree | N/A - will be supported in the LDAP plugin
ldapGroupRoleAttribute | N/A - will be supported in the LDAP plugin
ldapPasswordAttributeName | N/A - will be supported in the LDAP plugin
ldapServer | N/A - will be supported in the LDAP plugin
ldapManagerDn | N/A - will be supported in the LDAP plugin
ldapManagerPassword | N/A - will be supported in the LDAP plugin
ldapSearchBase | N/A - will be supported in the LDAP plugin
ldapSearchFilter | N/A - will be supported in the LDAP plugin
ldapGroupSearchBase | N/A - will be supported in the LDAP plugin
ldapGroupSearchFilter | N/A - will be supported in the LDAP plugin
ldapUsePassword | N/A - will be supported in the LDAP plugin
useKerberos | N/A - will be supported in a secondary plugin
kerberosLoginConfigFile | N/A - will be supported in a secondary plugin
kerberosRealm | N/A - will be supported in a secondary plugin
kerberosKdc | N/A - will be supported in a secondary plugin
kerberosRetrieveDatabaseRoles | N/A - will be supported in a secondary plugin
useHttpSessionEventPublisher | useHttpSessionEventPublisher
cacheUsers | cacheUsers
useCAS | N/A - will be supported in the CAS plugin
cas.casServer | N/A - will be supported in the CAS plugin
cas.casServerPort | N/A - will be supported in the CAS plugin
cas.casServerSecure | N/A - will be supported in the CAS plugin
cas.localhostSecure | N/A - will be supported in the CAS plugin
cas.failureURL | N/A - will be supported in the CAS plugin
cas.defaultTargetURL | N/A - will be supported in the CAS plugin
cas.fullLoginURL | N/A - will be supported in the CAS plugin
cas.fullServiceURL | N/A - will be supported in the CAS plugin
cas.authenticationProviderKey | N/A - will be supported in the CAS plugin
cas.userDetailsService | N/A - will be supported in the CAS plugin
cas.sendRenew | N/A - will be supported in the CAS plugin
cas.proxyReceptorUrl | N/A - will be supported in the CAS plugin
cas.filterProcessesUrl | N/A - will be supported in the CAS plugin
useNtlm | N/A - will be supported in a secondary plugin
ntlm.stripDomain | N/A - will be supported in a secondary plugin
ntlm.retryOnAuthFailure | N/A - will be supported in a secondary plugin
ntlm.forceIdentification | N/A - will be supported in a secondary plugin
ntlm.defaultDomain | N/A - will be supported in a secondary plugin
ntlm.netbiosWINS | N/A - will be supported in a secondary plugin
httpPort | portMapper.httpPort
httpsPort | portMapper.httpsPort
secureChannelDefinitionSource | N/A, use secureChannel.definition
channelConfig | secureChannel.definition
ipRestrictions | ipRestrictions
useFacebook | N/A - will be supported in the Facebook plugin
facebook.filterProcessesUrl | N/A - will be supported in the Facebook plugin
facebook.authenticationUrlRoot | N/A - will be supported in the Facebook plugin
facebook.apiKey | N/A - will be supported in the Facebook plugin
facebook.secretKey | N/A - will be supported in the Facebook plugin
{table}

h4. Script differences

In the Acegi plugin you run the @create-auth-domains@ script to initialize the plugin. This creates @grails-app/conf/SecurityConfig.groovy@ to allow configuration customization, and creates the User, Role, and Requestmap domain classes, along with the Login and Logout controllers and views. In addition there's the @generate-manager@ script which creates CRUD pages for the domain classes (earlier version of Grails didn't scaffold many-to-many relationships well, so these GSPs were necessary), and a @generate-registration@ script which installs a basic user registration controller.

In the Spring Security plugin, there's just one script, [s2-quickstart|Scripts]. It's most similar to @create-auth-domains@ since it creates domain classes and login/logout controllers, but it appends to @grails-app/conf/Config.groovy@ instead of creating a standalone configuration file. There's no equivalent to @generate-manager@ or @generate-registration@ since there will be an optional UI plugin that will generate domain class management screens, an admin console, and forgot password and registration workflows. If you want to create your own CRUD pages you can use the standard Grails @generate-all@ script. Various sections of this documentation discusses the changes you'll need to make in the generated source files, e.g. encrypting passwords before saving or updating a user.
 
  
