The plugin uses encrypted passwords using whatever digest algorithm you specify, but for enhanced protection against dictionary attacks you should use a salt in addition to digest encryption.

There are two approaches to using salted passwords in the plugin - defining a field in the @UserDetails@ class to access by reflection, or by directly implementing [SaltSource|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/dao/SaltSource.html] yourself.

h4. dao.reflectionSaltSourceProperty

For the first approach, you need to set the @dao.reflectionSaltSourceProperty@ configuration property, e.g.

{code}
grails.plugins.springsecurity.dao.reflectionSaltSourceProperty = 'username'
{code}

Note that this is a property of the @UserDetails@ class, which by default is an instance of @org.codehaus.groovy.grails.plugins.springsecurity.GrailsUser@ which extends the standard Spring Security [User|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/User.html], and not your 'person' domain class. This limits the available fields unless you use a custom @UserDetailsService@ as described [here|guide:7. Custom UserDetailsService].

As long as the username won't change, it's a good choice for the salt. If you choose a property that the user can change, then they won't be able to log in again after changing it unless you re-encrypt their password with the new value, so it's best to use a property that doesn't change.

Another option is to generate a random salt when creating users and store this in the database by adding a new field to the 'person' class. This requires a custom @UserDetailsService@ since you need a custom @UserDetails@ implementation that also has a 'salt' property, but this is more flexible and works in cases where users can change their username.

h4. SystemWideSaltSource

Spring Security supplies a simple @SaltSource@ implementation, [SystemWideSaltSource|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/authentication/dao/SystemWideSaltSource.html] that is also an option. It uses the same salt for each user, so it's less robust than using a different value for each user but still better than no salt at all.

h4. Custom @SaltSource@

To have full control over the process, you can implement the @SaltSource@ interface and replace the plugin's implementation with your own by defining a bean in @grails-app/conf/spring/resources.groovy@ with the name @saltSource@:

{code}
beans = {
   saltSource(com.foo.bar.MySaltSource) {
      // set properties
   }
}
{code}

h4. Encrypting passwords

Regardless of the implementation, you need to be aware of what value to use for a salt when creating or updating users, e.g. in a @UserController@'s @save@ or @update@ action. Then encrypting the password, you use the two-parameter version of @springSecurityService.encodePassword()@, e.g.

{code}
class UserController {

   def springSecurityService

   def save = {
      def userInstance = new User(params)
      userInstance.password = springSecurityService.encodePassword(
                    params.password, userInstance.username)
      if (!userInstance.save(flush: true)) {
         render view: 'create', model: [userInstance: userInstance]
         return
      }

      flash.message = "The user was created"
      redirect action: show, id: userInstance.id
   }

   def update = {
      def userInstance = User.get(params.id)

      if (userInstance.password != params.password) {
         params.password = springSecurityService.encodePassword(
                    params.password, userInstance.username)
      }
      userInstance.properties = params
      if (!userInstance.save(flush: true)) {
         render view: 'edit', model: [userInstance: userInstance]
         return
      }

      if (springSecurityService.loggedIn &&
               springSecurityService.principal.username == userInstance.username) {
         springSecurityService.reauthenticate userInstance.username
      }

      flash.message = "The user was updated"
      redirect action: show, id: userInstance.id
   }
}
{code}

